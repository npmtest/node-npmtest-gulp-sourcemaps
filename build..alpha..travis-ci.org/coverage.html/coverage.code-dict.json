{"/home/travis/build/npmtest/node-npmtest-gulp-sourcemaps/test.js":"/* istanbul instrument in package npmtest_gulp_sourcemaps */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-sourcemaps/lib.npmtest_gulp_sourcemaps.js":"/* istanbul instrument in package npmtest_gulp_sourcemaps */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_gulp_sourcemaps = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_gulp_sourcemaps = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-sourcemaps/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-gulp-sourcemaps && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_gulp_sourcemaps */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_gulp_sourcemaps\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_gulp_sourcemaps.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_gulp_sourcemaps.rollup.js'] =\n            local.assetsDict['/assets.npmtest_gulp_sourcemaps.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_gulp_sourcemaps.__dirname +\n                    '/lib.npmtest_gulp_sourcemaps.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-sourcemaps/gulp-sourcemaps/index.js":"'use strict';\n\nmodule.exports = {\n  init: require('./src/init'),\n  write: require('./src/write'),\n  mapSources: require('@gulp-sourcemaps/map-sources'),\n  identityMap: require('@gulp-sourcemaps/identity-map')\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-sourcemaps/gulp-sourcemaps/src/init/index.js":"'use strict';\nvar utils = require('../utils');\nvar unixStylePath = utils.unixStylePath;\nvar through = require('through2');\nvar path = require('path');\nvar acorn = require('acorn');\nvar SourceMapGenerator = require('source-map').SourceMapGenerator;\nvar css = require('css');\nvar initInternals = require('./index.internals');\n\n/**\n * Initialize source mapping chain\n */\nfunction init(options) {\n  var debug = require('../debug').spawn('init');\n\n  function sourceMapInit(file, encoding, callback) {\n    /*jshint validthis:true */\n\n    // pass through if file is null or already has a source map\n    if (file.isNull() || file.sourceMap) {\n      this.push(file);\n      return callback();\n    }\n\n    if (file.isStream()) {\n      return callback(new Error(utils.PLUGIN_NAME + '-init: Streaming not supported'));\n    }\n\n    if (options === undefined) {\n      options = {};\n    }\n    debug(function() {\n      return options;\n    });\n\n    var fileContent = file.contents.toString();\n    var sourceMap, preExistingComment;\n    var internals = initInternals(options, file, fileContent);\n\n    if (options.loadMaps) {\n      var result = internals.loadMaps();\n      sourceMap = result.map;\n      fileContent = result.content;\n      preExistingComment = result.preExistingComment;\n    }\n\n    if (!sourceMap && options.identityMap) {\n      debug(function() { return '**identityMap option is deprecated, update to use sourcemap.identityMap stream**'; });\n      debug(function() {\n        return 'identityMap';\n      });\n      var fileType = path.extname(file.path);\n      var source = unixStylePath(file.relative);\n      var generator = new SourceMapGenerator({file: source});\n\n      if (fileType === '.js') {\n        var tokenizer = acorn.tokenizer(fileContent, {locations: true});\n        while (true) {\n          var token = tokenizer.getToken();\n          if (token.type.label === \"eof\")\n            break;\n          var mapping = {\n            original: token.loc.start,\n            generated: token.loc.start,\n            source: source\n          };\n          if (token.type.label === 'name') {\n            mapping.name = token.value;\n          }\n          generator.addMapping(mapping);\n        }\n        generator.setSourceContent(source, fileContent);\n        sourceMap = generator.toJSON();\n\n      } else if (fileType === '.css') {\n        debug('css');\n        var ast = css.parse(fileContent, {silent: true});\n        debug(function() {\n          return ast;\n        });\n        var registerTokens = function(ast) {\n          if (ast.position) {\n            generator.addMapping({original: ast.position.start, generated: ast.position.start, source: source});\n          }\n\n          function logAst(key, ast) {\n            debug(function() {\n              return 'key: ' + key;\n            });\n            debug(function() {\n              return ast[key];\n            });\n          }\n\n          for (var key in ast) {\n            logAst(key, ast);\n            if (key !== \"position\") {\n              if (Object.prototype.toString.call(ast[key]) === '[object Object]') {\n                registerTokens(ast[key]);\n              } else if (Array.isArray(ast[key])) {\n                debug(function() {\n                  return \"@@@@ ast[key] isArray @@@@\";\n                });\n                for (var i = 0; i < ast[key].length; i++) {\n                  registerTokens(ast[key][i]);\n                }\n              }\n            }\n          }\n        };\n        registerTokens(ast);\n        generator.setSourceContent(source, fileContent);\n        sourceMap = generator.toJSON();\n      }\n    }\n\n    if (!sourceMap) {\n      // Make an empty source map\n      sourceMap = {\n        version: 3,\n        names: [],\n        mappings: '',\n        sources: [unixStylePath(file.relative)],\n        sourcesContent: [fileContent]\n      };\n    }\n    else if(preExistingComment !== null && typeof preExistingComment !== 'undefined')\n      sourceMap.preExistingComment = preExistingComment;\n\n    sourceMap.file = unixStylePath(file.relative);\n    file.sourceMap = sourceMap;\n\n    this.push(file);\n    callback();\n  }\n\n  return through.obj(sourceMapInit);\n}\n\nmodule.exports = init;\n","/home/travis/build/npmtest/node-npmtest-gulp-sourcemaps/gulp-sourcemaps/src/utils.js":"'use strict';\nvar path = require('path'),\n  detectNewline = require('detect-newline');\n\nfunction unixStylePath(filePath) {\n  return filePath.split(path.sep).join('/');\n}\n\nvar PLUGIN_NAME = require('../package.json').name;\n\nvar urlRegex = /^(https?|webpack(-[^:]+)?):\\/\\//;\n\nvar debug = require('./debug').spawn('utils');\n/*\nSo reusing the same ref for a regex (with global (g)) is from a poor decision in js.\nSee http://stackoverflow.com/questions/10229144/bug-with-regexp-in-javascript-when-do-global-search\n\nSo we either need to use a new instance of a regex everywhere.\n*/\nvar sourceMapUrlRegEx = function(){ return /\\/\\/\\# sourceMappingURL\\=.*/g;};\n\n\nvar getCommentFormatter = function (file) {\n  var extension = file.relative.split('.').pop(),\n    fileContents =  file.contents.toString(),\n    newline =  detectNewline.graceful(fileContents || ''),\n    commentFormatter = function(url) {\n      return '';\n    };\n\n  if (file.sourceMap.preExistingComment){\n    debug(function() { return 'preExistingComment commentFormatter'; });\n    commentFormatter = function(url) {\n      return \"//# sourceMappingURL=\" + url + newline;\n    };\n    return commentFormatter;\n  }\n\n  switch (extension) {\n    case 'css':\n      debug(function() { return 'css commentFormatter';});\n      commentFormatter = function(url) {\n        return newline + \"/*# sourceMappingURL=\" + url + \" */\" + newline;\n      };\n      break;\n    case 'js':\n      debug(function() { return 'js commentFormatter'; });\n      commentFormatter = function(url) {\n        return newline + \"//# sourceMappingURL=\" + url + newline;\n      };\n      break;\n    default:\n      debug(function() { return 'unknown commentFormatter'; });\n  }\n\n  return commentFormatter;\n};\n\nvar getInlinePreExisting = function(fileContent){\n  if(sourceMapUrlRegEx().test(fileContent)){\n    debug(function() { return 'has preExisting'; });\n    return fileContent.match(sourceMapUrlRegEx())[0];\n  }\n};\n\n\nmodule.exports = {\n  unixStylePath: unixStylePath,\n  PLUGIN_NAME: PLUGIN_NAME,\n  urlRegex: urlRegex,\n  sourceMapUrlRegEx: sourceMapUrlRegEx,\n  getCommentFormatter: getCommentFormatter,\n  getInlinePreExisting: getInlinePreExisting\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-sourcemaps/gulp-sourcemaps/src/debug.js":"module.exports = require('debug-fabulous').spawnable(require('../package.json').name);\n","/home/travis/build/npmtest/node-npmtest-gulp-sourcemaps/gulp-sourcemaps/src/init/index.internals.js":"'use strict';\n\nvar utils = require('../utils');\nvar rootDebug = require('../debug');\nvar convert = require('convert-source-map');\nvar stripBom = require('strip-bom-string');\nvar urlRegex = utils.urlRegex;\nvar fs = require('graceful-fs');\nvar path = require('path');\nvar unixStylePath = utils.unixStylePath;\n\nmodule.exports = function(options, file, fileContent) {\n\n  function loadMaps() {\n\n    var sources = {\n      path: '',\n      map: null,\n      content: fileContent,\n      preExistingComment: null\n    };\n\n    _getInlineSources(sources);\n    if (!sources.map) // ahh not inline, so try file\n      _getFileSources(sources);\n\n    _fixSources(sources);\n\n    return sources;\n  }\n\n  function _fixSources(sources) {\n    var debug = rootDebug.spawn('init:internals:loadMaps:_fixSources');\n\n    // fix source paths and sourceContent for imported source map\n    if (sources.map) {\n      sources.map.sourcesContent = sources.map.sourcesContent || [];\n      sources.map.sources.forEach(function(source, i) {\n        if (source.match(urlRegex)) {\n          sources.map.sourcesContent[i] = sources.map.sourcesContent[i] || null;\n          return;\n        }\n        var absPath = path.resolve(sources.path, source);\n        sources.map.sources[i] = unixStylePath(path.relative(file.base, absPath));\n\n        if (!sources.map.sourcesContent[i]) {\n          var sourceContent = null;\n          if (sources.map.sourceRoot) {\n            if (sources.map.sourceRoot.match(urlRegex)) {\n              sources.map.sourcesContent[i] = null;\n              return;\n            }\n            absPath = path.resolve(sources.path, sources.map.sourceRoot, source);\n          }\n\n          // if current file: use content\n          if (absPath === file.path) {\n            sourceContent = sources.content;\n          } else { //attempt load content from file\n            try {\n              debug(function() { return 'No source content for \"' + source + '\". Loading from file.'; });\n              sourceContent = stripBom(fs.readFileSync(absPath, 'utf8'));\n            } catch (e) {\n              debug(function() { return 'warn: source file not found: ' + absPath; });\n            }\n          }\n          sources.map.sourcesContent[i] = sourceContent;\n        }\n\n      });\n      // remove source map comment from source\n      file.contents = new Buffer(sources.content, 'utf8');\n    }\n\n  }\n\n  function _getInlineSources(sources) {\n    var debug = rootDebug.spawn('init:internals:loadMaps:_getInlineSources');\n\n    sources.preExistingComment = utils.getInlinePreExisting(sources.content);\n    // Try to read inline source map\n    sources.map = convert.fromSource(sources.content, options.largeFile);\n\n    if (!sources.map)\n      return sources;\n\n    sources.map = sources.map.toObject();\n    // sources in map are relative to the source file\n    sources.path = path.dirname(file.path);\n    if (!options.largeFile) {\n      debug('comment REMOVED');\n      sources.content = convert.removeComments(sources.content);\n    }\n  }\n\n  function _getFileSources(sources) {\n    // look for source map comment referencing a source map file\n    var mapComment = convert.mapFileCommentRegex.exec(sources.content);\n\n    var mapFile;\n    if (mapComment) {\n      sources.preExistingComment = mapComment[1] || mapComment[2];\n      mapFile = path.resolve(path.dirname(file.path), sources.preExistingComment);\n      sources.content = convert.removeMapFileComments(sources.content);\n      // if no comment try map file with same name as source file\n    } else {\n      mapFile = file.path + '.map';\n    }\n\n    // sources in external map are relative to map file\n    sources.path = path.dirname(mapFile);\n\n    try {\n      sources.map = JSON.parse(stripBom(fs.readFileSync(mapFile, 'utf8')));\n    } catch (e) {} //should we really swallow this error?\n  }\n\n  return {\n    loadMaps: loadMaps\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-sourcemaps/gulp-sourcemaps/src/write/index.js":"'use strict';\nvar utils = require('../utils');\nvar through = require('through2');\nvar unixStylePath = utils.unixStylePath;\nvar internalsInit = require('./index.internals');\n\n/**\n * Write the source map\n *\n * @param options options to change the way the source map is written\n *\n */\nfunction write(destPath, options) {\n  var debug = require('../debug').spawn('write');\n\n  debug(function() { return \"destPath\"; });\n  debug(function() { return destPath; });\n\n  debug(function() { return \"original options\";});\n  debug(function() { return options; });\n\n  if (options === undefined && typeof destPath !== 'string') {\n    options = destPath;\n    destPath = undefined;\n  }\n  options = options || {};\n\n  // set defaults for options if unset\n  if (options.includeContent === undefined)\n    options.includeContent = true;\n  if (options.addComment === undefined)\n    options.addComment = true;\n  if (options.charset === undefined)\n    options.charset = \"utf8\";\n\n  debug(function() { return \"derrived options\"; });\n  debug(function() { return options; });\n\n  var internals = internalsInit(destPath, options);\n\n  function sourceMapWrite(file, encoding, callback) {\n    /*jshint validthis:true */\n\n    if (file.isNull() || !file.sourceMap) {\n      this.push(file);\n      return callback();\n    }\n\n    if (file.isStream()) {\n      return callback(new Error(utils.PLUGIN_NAME + '-write: Streaming not supported'));\n    }\n\n    // fix paths if Windows style paths\n    file.sourceMap.file = unixStylePath(file.relative);\n\n    internals.setSourceRoot(file);\n    internals.loadContent(file);\n    internals.mapSources(file);\n    internals.mapDestPath(file, this);\n\n    this.push(file);\n    callback();\n  }\n\n\n\n  return through.obj(sourceMapWrite);\n}\n\nmodule.exports = write;\n","/home/travis/build/npmtest/node-npmtest-gulp-sourcemaps/gulp-sourcemaps/src/write/index.internals.js":"'use strict';\n\nmodule.exports = function(destPath, options) {\n\n  var utils = require('../utils');\n  var unixStylePath = utils.unixStylePath;\n  var fs = require('graceful-fs');\n  var path = require('path');\n  var stripBom = require('strip-bom-string');\n  var rootDebug = require('../debug').spawn('write:internals');\n\n  rootDebug(function() { return \"options\"; });\n  rootDebug(function() { return options; });\n\n  function setSourceRoot(file) {\n    var debug = rootDebug.spawn('setSourceRoot');\n\n    var sourceMap = file.sourceMap;\n    if (typeof options.sourceRoot === 'function') {\n      debug(function() { return 'is function'; });\n      sourceMap.sourceRoot = options.sourceRoot(file);\n    } else {\n      debug(function() { return 'from options'; });\n      sourceMap.sourceRoot = options.sourceRoot;\n    }\n    if (sourceMap.sourceRoot === null) {\n      debug(function() { return 'undefined'; });\n      sourceMap.sourceRoot = undefined;\n    }\n  }\n\n  function mapSources(file) {\n    var debug = rootDebug.spawn('mapSources');\n\n    //NOTE: make sure source mapping happens after content has been loaded\n    if (options.mapSources && typeof options.mapSources === 'function') {\n      debug(function() { return '**Option is deprecated, update to use sourcemap.mapSources stream**'; });\n      debug(function() { return 'function'; });\n\n      file.sourceMap.sources = file.sourceMap.sources.map(function (filePath) {\n        return options.mapSources(filePath, file);\n      });\n      return;\n    }\n\n    debug(function() { return \"file.path: \" + file.path; });\n    debug(function() { return \"file.cwd: \" + file.cwd; });\n    debug(function() { return \"file.base: \" + file.base; });\n\n    file.sourceMap.sources = file.sourceMap.sources.map(function(filePath) {\n      // keep the references files like ../node_modules within the sourceRoot\n      debug(function() { return \"filePath: \" + filePath; });\n\n      if (options.mapSourcesAbsolute === true){\n        debug(function() { return 'mapSourcesAbsolute'; });\n\n        if (!file.dirname){\n          debug(function() { return '!file.dirname'; });\n          filePath = path.join(file.base, filePath).replace(file.cwd, '');\n        } else {\n            debug(function() { return 'file.dirname: ' + file.dirname; });\n            filePath = path.resolve(file.dirname, filePath).replace(file.cwd, '');\n        }\n      }\n      return unixStylePath(filePath);\n    });\n  }\n\n  function loadContent(file) {\n    var debug = rootDebug.spawn('loadContent');\n\n    var sourceMap = file.sourceMap;\n    if (options.includeContent) {\n      sourceMap.sourcesContent = sourceMap.sourcesContent || [];\n\n      // load missing source content\n      for (var i = 0; i < sourceMap.sources.length; i++) {\n        if (!sourceMap.sourcesContent[i]) {\n          var sourcePath = path.resolve(file.base, sourceMap.sources[i]);\n          try {\n            debug('No source content for \"' + sourceMap.sources[i] + '\". Loading from file.');\n            sourceMap.sourcesContent[i] = stripBom(fs.readFileSync(sourcePath, 'utf8'));\n          }\n          catch (e) {\n            debug('source file not found: ' + sourcePath);\n          }\n        }\n      }\n    } else {\n      delete sourceMap.sourcesContent;\n    }\n  }\n\n  function  mapDestPath(file, stream) {\n    var debug = rootDebug.spawn('mapDestPath');\n    var sourceMap = file.sourceMap;\n\n    var comment,\n      commentFormatter = utils.getCommentFormatter(file);\n\n    if (destPath === undefined || destPath === null) {\n      // encode source map into comment\n      var base64Map = new Buffer(JSON.stringify(sourceMap)).toString('base64');\n      comment = commentFormatter('data:application/json;charset=' + options.charset + ';base64,' + base64Map);\n    } else {\n      var mapFile = path.join(destPath, file.relative) + '.map';\n      // custom map file name\n      if (options.mapFile && typeof options.mapFile === 'function') {\n        mapFile = options.mapFile(mapFile);\n      }\n\n      var sourceMapPath = path.join(file.base, mapFile);\n\n      // if explicit destination path is set\n      if (options.destPath) {\n        var destSourceMapPath = path.join(file.cwd, options.destPath, mapFile);\n        var destFilePath = path.join(file.cwd, options.destPath, file.relative);\n        sourceMap.file = unixStylePath(path.relative(path.dirname(destSourceMapPath), destFilePath));\n        if (sourceMap.sourceRoot === undefined) {\n          sourceMap.sourceRoot = unixStylePath(path.relative(path.dirname(destSourceMapPath), file.base));\n        } else if (sourceMap.sourceRoot === '' || (sourceMap.sourceRoot && sourceMap.sourceRoot[0] === '.')) {\n          sourceMap.sourceRoot = unixStylePath(path.join(path.relative(path.dirname(destSourceMapPath), file.base), sourceMap.sourceRoot));\n        }\n      } else {\n        // best effort, can be incorrect if options.destPath not set\n        sourceMap.file = unixStylePath(path.relative(path.dirname(sourceMapPath), file.path));\n        if (sourceMap.sourceRoot === '' || (sourceMap.sourceRoot && sourceMap.sourceRoot[0] === '.')) {\n          sourceMap.sourceRoot = unixStylePath(path.join(path.relative(path.dirname(sourceMapPath), file.base), sourceMap.sourceRoot));\n        }\n      }\n\n      var sourceMapFile;\n      sourceMapFile = file.clone(options.clone || {deep:false, contents:false});\n      sourceMapFile.path = sourceMapPath;\n      sourceMapFile.contents = new Buffer(JSON.stringify(sourceMap));\n      sourceMapFile.stat = {\n        isFile: function () { return true; },\n        isDirectory: function () { return false; },\n        isBlockDevice: function () { return false; },\n        isCharacterDevice: function () { return false; },\n        isSymbolicLink: function () { return false; },\n        isFIFO: function () { return false; },\n        isSocket: function () { return false; }\n      };\n      stream.push(sourceMapFile);\n\n      var sourceMapPathRelative = path.relative(path.dirname(file.path), sourceMapPath);\n\n      if (options.sourceMappingURLPrefix) {\n        var prefix = '';\n        if (typeof options.sourceMappingURLPrefix === 'function') {\n          prefix = options.sourceMappingURLPrefix(file);\n        } else {\n          prefix = options.sourceMappingURLPrefix;\n        }\n        sourceMapPathRelative = prefix + path.join('/', sourceMapPathRelative);\n      }\n      debug(function() { return \"destPath comment\"; });\n      comment = commentFormatter(unixStylePath(sourceMapPathRelative));\n\n      if (options.sourceMappingURL && typeof options.sourceMappingURL === 'function') {\n        debug(function() { return \"options.sourceMappingURL comment\"; });\n        comment = commentFormatter(options.sourceMappingURL(file));\n      }\n    }\n\n    // append source map comment\n    if (options.addComment){\n      file.contents = Buffer.concat([file.contents, new Buffer(comment)]);\n    }\n  }\n\n  return {\n    setSourceRoot: setSourceRoot,\n    loadContent: loadContent,\n    mapSources: mapSources,\n    mapDestPath: mapDestPath\n  };\n};\n"}